---
import HeaderCard from '../components/cards/HeaderCard.astro';
import HeaderIndex from '../components/schedule/IndexHeader.astro';
import PythonIcon from '../components/icons/PythonIcon.astro';
import JavaScriptIcon from '../components/icons/JavaScriptIcon.astro';
import ArrowIcon from '../components/icons/ArrowIcon.astro';
import ResultsCard from '../components/cards/ResultsCard.astro';
import Footer from '../components/schedule/Footer.astro';
import BenchmarkListCard from '../components/cards/BenchmarkListCard.astro';

export interface Props {
    title: string;
}

const { title } = Astro.props;
---

<!doctype html>
<html lang="es">
    <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width" />
        <meta name="generator" content={Astro.generator} />
        <title>{title}</title>
    </head>
    <body class="min-h-screen bg-gray-900 pb-32">
        <HeaderIndex class="w-full" />

        <main
            class="mx-auto flex max-w-7xl flex-col items-center justify-center"
        >
            <HeaderCard id="introduction" title="Introducción">
                <p>
                    Esta es la página de inicio del Trabajo de Fin de Grado de
                    Jordi Ramírez. Aquí se recopila información sobre el
                    proyecto, incluyendo el análisis comparativo y los
                    benchmarks de rendimiento y eficiencia entre <span
                        class="text-[#EFD81D]">JavaScript</span
                    >
                    y <span class="text-[#FDA703]">PyScript</span>.
                    <br /><br />
                    A nivel personal, este proyecto me ha permitido profundizar en
                    el uso de Python <PythonIcon />, un lenguaje que ya había
                    utilizado durante la carrera, pero que aún no había
                    explorado a fondo. Esta oportunidad me ha ayudado a
                    descubrir su potencial dentro del desarrollo web, un ámbito
                    tradicionalmente dominado por JavaScript <JavaScriptIcon />.
                    Tecnologías como PyScript y Pyodide abren la puerta a nuevas
                    formas de integrar Python en el navegador, permitiendo
                    soluciones innovadoras para el análisis y visualización de
                    datos directamente en la web.
                    <br /><br />
                    El proyecto surge del interés por explorar el auge de estas tecnologías
                    emergentes, planteando preguntas fundamentales como: ¿Pueden
                    PyScript y Pyodide ofrecer un rendimiento comparable al de JavaScript
                    en aplicaciones web? ¿Cuál es la tecnología más adecuada según
                    las necesidades de una aplicación: visualización gráfica, análisis
                    de datos en tiempo real o interacción con el usuario?
                    <br /><br />
                    Este trabajo busca dar respuesta a estas cuestiones y ofrecer
                    una visión más amplia sobre la relación y la complementariedad
                    entre JavaScript y PyScript en el desarrollo web moderno y en
                    la computación científica en el navegador.
                </p>
            </HeaderCard>

            <HeaderCard id="about" title="Sobre el proyecto">
                <div class="space-y-4">
                    <details
                        class="group rounded-lg border border-gray-700 bg-gray-800 p-4"
                    >
                        <summary
                            class="flex items-start justify-between text-lg font-medium text-white transition-all duration-300 ease-in-out group-open:text-purple-400 hover:cursor-pointer"
                        >
                            <div class="flex items-start gap-2">
                                <ArrowIcon />
                                <span> ¿Qué se compara? </span>
                            </div>
                        </summary>
                        <p class="mt-2 text-gray-400">
                            En general, el proyecto define un total de 6 ámbitos
                            que representan distintos casos de uso de JavaScript
                            y PyScript. Estos recogen pruebas con diferentes
                            objetivos, pero en gran medida miden las mismas
                            métricas de rendimiento y eficiencia. Los ámbitos
                            escogidos fueron:
                        </p>
                        <ul class="mt-2 ml-6 list-disc text-gray-400">
                            <li>Cálculos matemáticos intensivos</li>
                            <li>Procesamiento de grandes volúmenes de datos</li>
                            <li>
                                Carga y representación de gráficos complejos
                            </li>
                            <li>
                                Manejo de múltiples solicitudes concurrentes
                            </li>
                            <li>
                                Cálculo y verificación de integridad en datos
                                sensibles
                            </li>
                            <li>
                                Reconocimiento de patrones y entrenamiento de
                                modelos
                            </li>
                        </ul>
                        <p class="mt-2 text-gray-400">
                            Cada uno de estos ámbitos incluye diversas pruebas,
                            con varias versiones de implementaciones. Dichas
                            versiones permiten observar el rendimiento de las
                            tecnologías empleando distintas herramientas y
                            metodologías.
                        </p>
                    </details>

                    <details
                        class="group rounded-lg border border-gray-700 bg-gray-800 p-4"
                    >
                        <summary
                            class="flex items-start justify-between text-lg font-medium text-white transition-all duration-300 ease-in-out group-open:text-purple-400 hover:cursor-pointer"
                        >
                            <div class="flex items-start gap-2">
                                <ArrowIcon />
                                <span> ¿Por qué es importante? </span>
                            </div>
                        </summary>
                        <p class="mt-2 text-gray-400">
                            En un entorno donde JavaScript domina el desarrollo
                            web, resulta esencial explorar tecnologías
                            emergentes como PyScript que, sin reemplazar
                            JavaScript, podrían complementar sus capacidades. El
                            análisis de fortalezas y debilidades de cada enfoque
                            permite a los desarrolladores construir aplicaciones
                            más eficientes, aprovechando sinergias dentro del
                            mismo ecosistema.
                        </p>
                    </details>

                    <details
                        class="group rounded-lg border border-gray-700 bg-gray-800 p-4"
                    >
                        <summary
                            class="flex items-start justify-between text-lg font-medium text-white transition-all duration-300 ease-in-out group-open:text-purple-400 hover:cursor-pointer"
                        >
                            <div class="flex items-start gap-2">
                                <ArrowIcon />
                                <span> Tecnologías usadas </span>
                            </div>
                        </summary>
                        <p class="mt-2 text-gray-400">
                            Para el desarrollo integral tanto en backend como
                            frontend, se emplearon diversas tecnologías y
                            herramientas que permitieron analizar y comparar el
                            rendimiento de JavaScript y PyScript. Entre ellas
                            son:
                        </p>
                        <ul class="mt-2 ml-6 list-disc text-gray-400">
                            <li>
                                JavaScript
                                <ul class="ml-6 list-disc">
                                    <li>Node.js</li>
                                    <li>Librerías</li>
                                </ul>
                            </li>
                            <li>
                                PyScript
                                <ul class="ml-6 list-disc">
                                    <li>Python</li>
                                    <li>Pyodide</li>
                                    <li>Librerías</li>
                                </ul>
                            </li>
                            <li>Astro Framework</li>
                            <li>Tailwind CSS</li>
                        </ul>
                    </details>

                    <details
                        class="group rounded-lg border border-gray-700 bg-gray-800 p-4"
                    >
                        <summary
                            class="flex items-start justify-between text-lg font-medium text-white transition-all duration-300 ease-in-out group-open:text-purple-400 hover:cursor-pointer"
                        >
                            <div class="flex items-start gap-2">
                                <ArrowIcon />
                                <span>Pruebas realizadas</span>
                            </div>
                        </summary>
                        <p class="mt-2 text-gray-400">
                            Cada ámbito de evaluación se abordó mediante pruebas
                            específicas pensadas para analizar los resultados
                            desde distintos enfoques y perspectivas. De entre
                            los distintos ambitos, las pruebas más intuitivas
                            que se pueden realizar en el mundo cotidiano son:
                        </p>
                        <ul class="mt-2 ml-6 list-disc text-gray-400">
                            <li>Multiplicación de matrices</li>
                            <li>Detección de números primos</li>
                            <li>
                                Cálculo de dígitos de π con aritmética de
                                precisión arbitraria
                            </li>
                            <li>Procesamiento de grandes conjuntos de datos</li>
                            <li>
                                Análisis estadístico con paralelización masiva
                            </li>
                            <li>...</li>
                        </ul>
                        <p class="mt-2 text-gray-400">
                            En total se realizaron de entre 6 entornos o ambitos
                            conceptuales, se realizaron un total de 18
                            implementaciones de las diferentes pruebas. Algunas
                            son varias versiones de la misma prueba, y otras
                            contienen una unica version de la prueba.
                        </p>
                    </details>
                </div>
            </HeaderCard>

            <BenchmarkListCard
                id="benchmarks"
                title="Benchmarks"
                ref="benchmarks"
            />

            <HeaderCard id="results" title="Resultados">
                <div
                    class="grid grid-cols-1 gap-4 overflow-x-hidden sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-3"
                >
                    <!-- 1. Cálculos matemáticos intensivos -->
                    <ResultsCard title="1. Cálculos matemáticos intensivos">
                        <ol
                            class="break-words list-decimal list-inside space-y-2"
                        >
                            <li>
                                <strong>JavaScript (cliente)</strong><br />
                                Fue el entorno más rápido, con tiempos de ejecución
                                extremadamente veloces, pero también el que más memoria
                                consumió.
                            </li>
                            <li>
                                <strong>JavaScript (servidor)</strong><br />
                                Mostró inconsistencias en los tiempos de ejecución
                                entre pruebas similares.
                            </li>
                            <li>
                                <strong>Python (servidor)</strong><br />
                                Lideró en eficiencia gracias a bibliotecas optimizadas
                                como NumPy y SciPy, manteniendo un uso de recursos
                                muy contenido.
                            </li>
                            <li>
                                <strong>PyScript</strong><br />
                                Es viable únicamente cuando la minimización del uso
                                de memoria prima sobre la velocidad de cálculo.
                            </li>
                        </ol>
                    </ResultsCard>

                    <!-- 2. Procesamiento de grandes volúmenes de datos -->
                    <ResultsCard
                        title="2. Procesamiento de grandes volúmenes de datos"
                    >
                        <ol
                            class="break-words list-decimal list-inside space-y-2"
                        >
                            <li>
                                <strong>JavaScript</strong><br />
                                Sobresalió en operaciones nativas, aunque su rendimiento
                                se degradó con estructuras de datos más complejas.
                            </li>
                            <li>
                                <strong>PyScript</strong><br />
                                Gracias a bibliotecas especializadas, superó a JavaScript
                                en tareas ETL complejas, logrando un mejor equilibrio
                                entre velocidad y consumo de memoria.

                                <br /><br />
                                La implementación con Web Workers mostró una escalabilidad
                                más notable en PyScript que en JavaScript.
                            </li>
                        </ol>
                    </ResultsCard>

                    <!-- 3. Renderizado de gráficos complejos -->
                    <ResultsCard title="3. Renderizado de gráficos complejos">
                        <ol
                            class="break-words list-decimal list-inside space-y-2"
                        >
                            <li>
                                <strong>JavaScript</strong><br />
                                Mantuvo un rendimiento constante con tiempos de renderizado
                                significativamente inferiores en gráficos interactivos.
                            </li>
                            <li>
                                <strong>PyScript</strong><br />
                                Requirió un tiempo considerablemente mayor para generar
                                imágenes vectoriales de alta complejidad.
                            </li>
                        </ol>
                    </ResultsCard>

                    <!-- 4. Manejo de solicitudes concurrentes -->
                    <ResultsCard title="4. Manejo de solicitudes concurrentes">
                        <ol class="list-decimal list-inside space-y-2">
                            <li>
                                <strong>JavaScript</strong><br />
                                Superó a PyScript en todos los escenarios HTTP.
                            </li>
                            <li>
                                <strong>PyScript</strong><br />
                                Mostró una mejor escalabilidad al trabajar con WebSockets,
                                acercándose al rendimiento de JavaScript.
                            </li>
                        </ol>
                    </ResultsCard>

                    <!-- 5. Cálculo y verificación de integridad en datos sensibles -->
                    <ResultsCard
                        title="5. Cálculo y verificación de integridad en datos sensibles"
                    >
                        <span class="block">
                            JavaScript demostró una superioridad absoluta en
                            operaciones criptográficas SHA-256, acompañado de un
                            menor consumo de memoria.
                        </span>
                    </ResultsCard>

                    <!-- 6. Reconocimiento de patrones y clasificación -->
                    <ResultsCard
                        title="6. Reconocimiento de patrones y clasificación"
                    >
                        <ol class="list-decimal list-inside space-y-2">
                            <li>
                                <strong>JavaScript</strong><br />
                                Ejecutó el entrenamiento con mayor rapidez, aunque
                                con una precisión ligeramente inferior en modelos
                                complejos.
                            </li>
                            <li>
                                <strong>PyScript</strong><br />
                                Consumió más memoria, pero alcanzó una precisión
                                superior a la de JavaScript.
                            </li>
                        </ol>
                    </ResultsCard>

                    <!-- Conclusiones Generales -->
                    <div
                        class="col-span-1 mt-2 text-gray-300 sm:col-span-2 md:col-span-3 lg:col-span-3"
                    >
                        <h3 class="text-xl font-bold text-purple-400">
                            Conclusiones Generales
                        </h3>
                        <p class="mt-4">
                            El análisis revela que JavaScript mantiene la
                            ventaja en la mayoría de los escenarios evaluados,
                            especialmente en operaciones nativas y en tiempo
                            real. Por su parte, PyScript exhibe un potencial
                            destacado en el procesamiento científico gracias a
                            bibliotecas especializadas, aunque su sobrecarga
                            inicial (carga de WASM e inicialización del
                            intérprete) limita su uso en situaciones que exigen
                            tiempos de respuesta inmediatos.
                        </p>
                        <p class="mt-4">
                            La integración de Web Workers puso de manifiesto
                            diferencias cruciales: JavaScript mantuvo una buena
                            escalabilidad con workers, mientras que PyScript
                            mejoró notablemente una vez completada la fase de
                            inicialización, lo que sugiere una mayor
                            escalabilidad para procesos que contengan gran
                            numero de workers. Sin embargo su espera a la
                            creación de workers fue muy grande.
                        </p>
                    </div>
                </div>
            </HeaderCard>
        </main>
        <Footer />
    </body>
</html>
