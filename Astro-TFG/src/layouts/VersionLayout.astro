---
import Header from '../components/schedule/BenchmarkHeader.astro';
import Footer from '../components/schedule/Footer.astro';

const {
    benchmarkTitle,
    testTitle,
    versionTitle,
    versionDescription,
    jsPath,
    pyPath,
    jsLibs,
    pyConfig,
    useNode,
    useBackend,
    inputs,
    graph,
} = Astro.props;
---

<html lang="es">
    <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width" />
        <title>{versionTitle} - {benchmarkTitle}</title>
        <link
            rel="stylesheet"
            href="https://pyscript.net/releases/2024.5.2/core.css"
        />
        <script
            type="module"
            src="https://pyscript.net/releases/2024.5.2/core.js"></script>
        {jsLibs.map((src: string) => <script src={src} />)}

        <script type="module" src={`${jsPath}main.js`} defer></script>
        {
            pyConfig ? (
                <script
                    type="py"
                    src={`${pyPath}main.py`}
                    config={
                        pyConfig.endsWith('.json')
                            ? `${pyPath.replace(/python\/$/, 'json/')}${pyConfig}`
                            : `${pyPath}${pyConfig}`
                    }
                />
            ) : (
                <script type="py" src={`${pyPath}main.py`} />
            )
        }
    </head>
    <body
        class="min-h-screen bg-gray-900 text-white"
        data-js-path={jsPath}
        data-py-path={pyPath}
        data-py-config={pyConfig}
        data-use-node={useNode}
        data-use-backend={useBackend}
    >
        <Header
            title={testTitle}
            description={versionDescription || benchmarkTitle}
        />
        <div
            id="pyscript-loader"
            class="fixed inset-0 z-50 flex flex-col items-center justify-center bg-gray-900 bg-opacity-90 text-white"
        >
            <div
                class="animate-spin rounded-full h-16 w-16 border-t-4 border-purple-500 border-opacity-50 mb-4"
            >
            </div>
            <p class="text-lg font-semibold">Cargando PyScript…</p>
        </div>
        <div
            id="loading-message"
            class="fixed inset-0 z-50 flex flex-col items-center justify-center bg-gray-900/80 bg-opacity-90 text-white"
            style="display: none;"
        >
            <div
                class="animate-spin rounded-full h-16 w-16 border-t-4 border-purple-500 border-opacity-70 mb-4"
            >
            </div>
            <p class="text-lg font-semibold">Procesando…</p>
            <p class="text-sm">
                Se mostraran los resultados una vez finalizada la ejecución.
            </p>
        </div>

        <main
            class="mx-auto mt-14 max-w-7xl px-4 sm:px-6 lg:px-8 space-y-10 text-center"
        >
            <section class="space-y-6">
                <h2 class="text-2xl font-semibold text-purple-400">
                    {versionTitle}
                </h2>

                <div class="flex flex-wrap justify-center gap-4">
                    <div
                        class="flex flex-col justify-center gap-4 items-center"
                    >
                        {
                            inputs &&
                                inputs.map((input: string) => (
                                    <div class="flex flex-col items-center">
                                        <label
                                            for={`${input}-javascript`}
                                            class="mb-1 text-sm text-purple-300"
                                        >
                                            {{
                                                'num-executions':
                                                    'Nº de ejecuciones',
                                                'parallel-workers':
                                                    'Trabajadores en paralelo',
                                            }[input] ||
                                                input
                                                    .replace(/-/g, ' ')
                                                    .replace(/\b\w/g, (l) =>
                                                        l.toUpperCase()
                                                    )}{' '}
                                            (JS)
                                        </label>
                                        <input
                                            id={`${input}-javascript`}
                                            type="number"
                                            min="1"
                                            value="1"
                                            class="w-36 rounded-md bg-gray-800 px-2 py-1 text-white text-center border border-gray-600 focus:outline-none focus:ring focus:ring-purple-400"
                                        />
                                    </div>
                                ))
                        }
                        <button
                            onclick="runJSBenchmark()"
                            class="rounded-lg bg-gray-800 px-4 py-2 transition-all focus:ring focus:ring-purple-400 hover:scale-105 hover:bg-gray-700 hover:text-purple-400 cursor-pointer"
                        >
                            Ejecutar JavaScript
                        </button>
                    </div>

                    <div
                        class="flex flex-col justify-center gap-4 items-center"
                    >
                        {
                            inputs &&
                                inputs.map((input: string) => (
                                    <div class="flex flex-col items-center">
                                        <label
                                            for={`${input}-pyscript`}
                                            class="mb-1 text-sm text-purple-300"
                                        >
                                            {{
                                                'num-executions':
                                                    'Nº de ejecuciones',
                                                'parallel-workers':
                                                    'Trabajadores en paralelo',
                                            }[input] ||
                                                input
                                                    .replace(/-/g, ' ')
                                                    .replace(/\b\w/g, (l) =>
                                                        l.toUpperCase()
                                                    )}{' '}
                                            (PyScript)
                                        </label>
                                        <input
                                            id={`${input}-pyscript`}
                                            type="number"
                                            min="1"
                                            value="1"
                                            class="w-36 rounded-md bg-gray-800 px-2 py-1 text-white text-center border border-gray-600 focus:outline-none focus:ring focus:ring-purple-400"
                                        />
                                    </div>
                                ))
                        }
                        <button
                            onclick="runPy()"
                            class="rounded-lg bg-gray-800 px-4 py-2 transition-all focus:ring focus:ring-purple-400 hover:scale-105 hover:bg-gray-700 hover:text-purple-400 cursor-pointer"
                        >
                            Ejecutar PyScript
                        </button>
                    </div>

                    {
                        useNode && (
                            <div class="flex flex-col justify-center gap-4 items-center">
                                <button
                                    onclick="runNodeBenchmark()"
                                    class="rounded-lg bg-gray-800 px-4 py-2 transition-all focus:ring focus:ring-purple-400 hover:scale-105 hover:bg-gray-700 hover:text-purple-400 cursor-pointer"
                                >
                                    Ejecutar Node.js
                                </button>
                            </div>
                        )
                    }

                    {
                        useBackend && (
                            <div class="flex flex-col justify-center gap-4 items-center">
                                <button
                                    onclick="runPyBackendBenchmark()"
                                    class="rounded-lg bg-gray-800 px-4 py-2 transition-all focus:ring focus:ring-purple-400 hover:scale-105 hover:bg-gray-700 hover:text-purple-400 cursor-pointer"
                                >
                                    Ejecutar Backend Python
                                </button>
                            </div>
                        )
                    }
                </div>
            </section>

            <section>
                <h3 class="mb-4 text-lg font-semibold text-gray-300">
                    Resultados
                </h3>
                <pre id="output" class="text-left text-md text-gray-200 my-8">
                </pre>
                <div class="overflow-x-auto">
                    <table
                        class="mx-auto w-full max-w-5xl table-auto border-collapse border border-gray-700 text-sm text-left"
                    >
                        <thead class="bg-gray-800 text-purple-300">
                            <tr>
                                <th class="border border-gray-700 px-4 py-2"
                                    >JavaScript</th
                                >
                                <th class="border border-gray-700 px-4 py-2"
                                    >PyScript</th
                                >
                                {
                                    useNode && (
                                        <th class="border border-gray-700 px-4 py-2">
                                            Node.js
                                        </th>
                                    )
                                }
                                {
                                    useBackend && (
                                        <th class="border border-gray-700 px-4 py-2">
                                            Python Backend
                                        </th>
                                    )
                                }
                            </tr>
                        </thead>
                        <tbody class="text-gray-300">
                            <tr>
                                <td
                                    id="javascript-output"
                                    class="border border-gray-700 px-4 py-2"
                                    >Esperando...</td
                                >
                                <td
                                    id="pyscript-output"
                                    class="border border-gray-700 px-4 py-2"
                                    >Esperando...</td
                                >
                                {
                                    useNode && (
                                        <td
                                            id="nodeJs-output"
                                            class="border border-gray-700 px-4 py-2"
                                        >
                                            Esperando...
                                        </td>
                                    )
                                }
                                {
                                    useBackend && (
                                        <td
                                            id="pythonBackend-output"
                                            class="border border-gray-700 px-4 py-2"
                                        >
                                            Esperando...
                                        </td>
                                    )
                                }
                            </tr>
                        </tbody>
                    </table>
                </div>
            </section>
        </main>
        <div
            class="relative bottom-0 left-0 right-0 lg:absolute flex justify-center"
        >
            <Footer />
        </div>
    </body>
    <script>
        let jsPath = document.body.dataset.jsPath;
        let pyPath = document.body.dataset.pyPath;
        let pyConfig = document.body.dataset.pyConfig;
        let useNode = document.body.dataset.useNode === 'true';
        let useBackend = document.body.dataset.useBackend === 'true';

        console.log('script:', { pyPath, pyConfig });
        console.log('jsPath:', { jsPath });
        console.log('pyPath:', { pyPath });
        console.log('PyConfig:', { pyConfig });

        window.runNodeBenchmark = async function () {
            if (!useNode) return;
            window.clearCell('nodeJs-output');
            try {
                import('../scripts/RunNodeServer.js')
                    .then((module) => {
                        module.runNodeBenchmark(jsPath);
                    })
                    .catch((error) => {
                        console.error('Error loading module:', error);
                    });
            } catch (err) {
                console.error('Error al ejecutar Node benchmark:', err);
            }
        };

        // Button handler para Python Backend
        window.runPyBackendBenchmark = async function () {
            if (!useBackend) return;
            window.clearCell('pythonBackend-output');
            try {
                import('../scripts/RunPythonServer.js')
                    .then((module) => {
                        module.runPyBackendBenchmark(pyPath);
                    })
                    .catch((error) => {
                        console.error('Error loading module:', error);
                    });
            } catch (err) {
                console.error('Error al ejecutar Python backend:', err);
            }
        };

        jsPath = jsPath?.concat('server.js');
        pyPath = pyPath?.concat('server.py');

        let startTime = performance.now();
        document.addEventListener('py:ready', () => {
            document.getElementById('pyscript-loader')?.remove();
            let endTime = performance.now();
            let loadTime = endTime - startTime;

            const loader = document.getElementById('pyscript-loader');
            if (loader) {
                loader.remove();
            }

            const outputDiv = document.getElementById('output');
            if (!outputDiv) return;
            outputDiv.innerText += `PLT: ${loadTime.toFixed(2)} ms\n`;
        });

        let startTimerWebAssembly: number = 0;

        window.showExecutionLoader = function () {
            let loadingMessage = document.getElementById('loading-message');
            if (!loadingMessage) return;
            loadingMessage.style.display = 'flex';
        };

        window.hideExecutionLoader = function () {
            let loadingMessage = document.getElementById('loading-message');
            if (!loadingMessage) return;
            loadingMessage.style.display = 'none';
        };

        window.runPy = function () {
            window.showExecutionLoader();

            requestAnimationFrame(() => {
                setTimeout(() => {
                    if (window.run_py_benchmark) {
                        startTimerWebAssembly = performance.now();
                        window.run_py_benchmark(event);
                    } else {
                        console.error('run_py_benchmark no está definido');
                        window.hideExecutionLoader();
                    }
                }, 0);
            });
        };

        window.endTimerWebAssembly = function () {
            const endTime = performance.now();
            const totalElapsedTime = endTime - startTimerWebAssembly;
            const resultDiv = document.createElement('div');
            resultDiv.textContent = `ET (Py + WA): ${totalElapsedTime.toFixed(2)} ms`;
            const pyscriptOutput = document.getElementById('pyscript-output');

            if (!pyscriptOutput) return;

            pyscriptOutput.appendChild(resultDiv);
            window.hideExecutionLoader();
        };

        window.clearCell = function (elementId: string) {
            const element = document.getElementById(elementId);
            if (!element) return;
            element.textContent = '';
        };

        window.displayPlot = function (base64Data, elementId) {
            try {
                import('../scripts/DisplayPlot.js').then((module) => {
                    module.display(base64Data, elementId);
                });
            } catch (err) {
                console.error('Error al mostrar gráfico:', err);
            }
        };
    </script>
</html>
