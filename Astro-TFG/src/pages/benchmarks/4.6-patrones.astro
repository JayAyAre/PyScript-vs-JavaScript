---
import '../../styles/global.css';
import Layout from '../../layouts/BenchmarkLayout.astro';

const benchmark = {
    title: '6. Reconocimiento de patrones y clasificación de datos',
    link: '/4.5-criptografia',
    description:
        'Este apartado analizara las librerias disponibles para el entrenamiento de modelos de aprendizaje automático y su eficiencia en el procesamiento de datos. Esto es importante en los tiempos actuales de la inteligencia artificial, ya que se necesitan modelos de aprendizaje automático para realizar tareas como la clasificación de imágenes, el reconocimiento facial, la detección de patrones en imágenes y la generación de texto.',
    warning:
        'En estos escenarios se emplean WebWorkers, por lo que no se bloquearan las pruebas mientras se ejecutan. Sin embargo, siempre que se use PyScript, seguira existiendo el PLT.',
    tests: [
        {
            title: 'Clasificación del dataset Iris',
            description:
                'Compararemos los modelos disponibles en ambas tecnologias para la clasificacion del conjunto de datos Iris, evaluando su eficiencia en el procesamiento de datos. Este contiene 150 muestras de tres clases distintas, cada una con cuatro caracteristicas.',
            versions: [
                {
                    title: 'Version optimizada',
                    description:
                        'Esta prueba implementa una única versión optimizada que simula un escenario de entrenamiento y evaluación de un modelo de Machine Learning del mundo real. Utiliza el dataset Iris para entrenar un clasificador Random Forest durante múltiples repeticiones configurables. En cada repetición se mide el tiempo de entrenamiento, el tiempo de inferencia, y la precisión obtenida. Al finalizar, se calcula el promedio de estas métricas y se estima el tamaño del modelo resultante en memoria.',
                },
            ],
        },
        {
            title: 'Clasificación del dataset Digits',
            description:
                'Para evaluar el rendimiento de los modelos, se utilizarán conjuntos de datos y algoritmos alternativos. En esta prueba, se compara la eficiencia de scikit-learn (K-Nearest Neighbors) en PyScript con su equivalente en JavaScript, implementado con la librería ml-knn de mljs. El análisis se realizará sobre el conjunto de datos Digits (1797 imágenes de 8x8 píxeles distribuidas en 10 clases), un estándar para la clasificación de imágenes de pequeño tamaño.',
            versions: [
                {
                    title: 'Version optimizada',
                    description:
                        'Esta prueba contiene una única versión optimizada que simula un escenario de clasificación real utilizando el dataset Digits. En cada repetición configurable, se entrena un modelo de vecinos más cercanos (KNN) con los datos de entrenamiento, se realiza interferencia sobre el conjunto de prueba y se calcula la precisión obtenida. Se miden y promedian los tiempos de entrenamiento, interferencia y precisión. Además, se estima el tamaño en memoria del modelo final para reflejar su impacto computacional.',
                },
            ],
        },
    ],
};
---

<Layout {...benchmark} />
